import{u as n,j as e}from"./index-J8clnReJ.js";const r={title:"The File Tree Module",description:"undefined"};function s(i){const t={a:"a",aside:"aside",div:"div",h1:"h1",h2:"h2",header:"header",p:"p",...n(),...i.components};return e.jsxs(e.Fragment,{children:[e.jsx(t.header,{children:e.jsxs(t.h1,{id:"the-file-tree-module",children:["The File Tree Module",e.jsx(t.a,{"aria-hidden":"true",tabIndex:"-1",href:"#the-file-tree-module",children:e.jsx(t.div,{"data-autolink-icon":!0})})]})}),`
`,e.jsx(t.p,{children:"The Jackal Filetree module organizes and manages user files securely and is user-friendly. When a user uploads a file using the Storage module, the file is only accessible from the File ID (FID), which can be challenging to remember for every file uploaded to Jackal."}),`
`,e.jsx(t.p,{children:"Additionally, every single upload would be required to be public, or the user would need to keep track of every symmetric key used to encrypt the files and manually map them to the FIDs."}),`
`,e.jsx(t.p,{children:"To address this issue, the File Tree module implements a tree structure that stores each file as an entry in the tree. Organizing this structure is also trivial, as we can assign children to pseudo files that we call folders."}),`
`,e.jsx(t.p,{children:"Finally, the protocol maps every file to its respective key to keep track of encryption keys, emphasizing the security and privacy posture that the File Tree module enables."}),`
`,e.jsxs(t.h2,{id:"folder-abstraction",children:["Folder Abstraction",e.jsx(t.a,{"aria-hidden":"true",tabIndex:"-1",href:"#folder-abstraction",children:e.jsx(t.div,{"data-autolink-icon":!0})})]}),`
`,e.jsx(t.p,{children:"Of course, these are all abstractions of what's actually under the hood. The File Tree module doesn't handle any folder logic; the system believes it stores files that act as metadata stores, which then update to reflect changes in folders."}),`
`,e.jsx(t.p,{children:"This gives the user experience the feeling that folders and files are separate entities in the tree, but in reality, they are identical."}),`
`,e.jsxs(t.h2,{id:"file-entry-structure",children:["File Entry Structure",e.jsx(t.a,{"aria-hidden":"true",tabIndex:"-1",href:"#file-entry-structure",children:e.jsx(t.div,{"data-autolink-icon":!0})})]}),`
`,e.jsx(t.p,{children:"Storing file entries on-chain is a challenge since the chain itself is public. This requires using client-side encryption before uploading data to the chain itself."}),`
`,e.jsx(t.p,{children:"The main component of a file is its location (Address), which allows users to query the rest of the data in the file."}),`
`,e.jsx(t.p,{children:"You can think of the location as a key in a traditional key-value store or a path in bucket-based storage. The address is hashed using SHA256 to ensure it is impossible to retrieve the plain-text representation of the file name while still being able to query the file using its given name."}),`
`,e.jsx(t.p,{children:"The second most important data point in a file is its content. This field is extremely versatile, as it can store any string. Traditionally, it is used to store a JSON list of FIDs to point to a file on the Storage Module; however, the protocol can also theoretically use it to store short bits of text like encrypted passwords for a private password manager."}),`
`,e.jsx(t.p,{children:"The owner tag is a hashed version of the owner, hiding what address owns each file. This field can be changed to reflect the transferral of ownership. When making changes to the file, such as deletion, movement, or adding/removing viewers/editors, the owner field is consulted to determine permissions. The same applies to edit access; editors can update the contents but nothing else."}),`
`,e.jsxs(t.h2,{id:"encrypted-viewing-access",children:["Encrypted Viewing Access",e.jsx(t.a,{"aria-hidden":"true",tabIndex:"-1",href:"#encrypted-viewing-access",children:e.jsx(t.div,{"data-autolink-icon":!0})})]}),`
`,e.jsx(t.p,{children:"Users need access to the symmetric keys used to encrypt the files in order to view them. To do this, the protocol has a map of hashed addresses, with each user's respective version of the symmetric key encrypted with that address's corresponding public key."}),`
`,e.jsx(t.p,{children:"The protocol can then store that map in the file entry as an encryption key discovery layer. The addresses in this viewing list can only access files and decrypt the data in their client; they have no privileges over modifying the file entry in any way."}),`
`,e.jsx(t.p,{children:"This approach ensures that the File Tree module maintains a strong security and privacy posture for user data."}),`
`,e.jsx(t.aside,{"data-callout":"info",children:e.jsxs(t.p,{children:["Please refer to ",e.jsx(t.a,{href:"https://github.com/JackalLabs/canine-chain/blob/master/x/filetree/README.md",children:"the module documentation"})," for a more detailed guide on integrating the File tree module into your application."]})})]})}function o(i={}){const{wrapper:t}={...n(),...i.components};return t?e.jsx(t,{...i,children:e.jsx(s,{...i})}):s(i)}export{o as default,r as frontmatter};
